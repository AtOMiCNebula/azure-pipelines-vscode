# Common steps template
#
# Things which happen regardless of CI, PR, or release builds
parameters:
  jobName: 'CI'

jobs:
  - job: ${{ parameters.jobname }}

    pool:
      vmImage: ubuntu-16.04

    steps:
    # for convenience, we tag CI-produced packages with a version number
    # pointing to the commit which was built. for PRs, also include the PR #.
    - bash: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")

        if [ -n "$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER" ]; then
          VERSION_STRING=${PACKAGE_VERSION}_pr_${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}_$(git rev-parse --short HEAD)
        elif [ "$SYSTEM_BUILD_SOURCEBRANCHNAME" == "refs/heads/master" ]; then
          VERSION_STRING=${PACKAGE_VERSION}_ci_$(git rev-parse --short HEAD)
        elif [ "$SYSTEM_BUILD_SOURCEBRANCHNAME" == refs/heads/releases* ]; then
          VERSION_STRING=${PACKAGE_VERSION}
        fi

        npm --no-git-tag-version version $VERSION_STRING
        echo "##vso[build.updatebuildnumber]${VERSION_STRING}_${BUILD_BUILDID}"
        echo "$PACKAGE_VERSION" > version.txt
      displayName: Set version number of package and build

    - script: npm install
      displayName: npm install

    - script: npm run compile
      displayName: Build extension

    # TODO: call the schema endpoint to generate the shipped schema file
    # - script: |
    #     echo no-op
    #   displayName: Generate service-schema.json

    - script: npm run unittest
      displayName: Run unit tests

    # Acquire the `vsce` tool and use it to package
    - script: |
        sudo npm install -g vsce
        vsce package
      displayName: Create VSIX

    - script: |
        npm run vscode:prepublish
        cat /home/vsts/.npm/_logs/*.log
      displayName: Echo npm error logs on failure
      condition: failed()

    # For releasable builds, we'll want the branch and the changelog
    # Expects that a 'version.txt' has been laid down by a previous step
    - bash: |
        echo $(Build.SourceBranch) | sed "s|refs/[^/]*/||" > branch.txt
        PACKAGE_VERSION=$(cat version.txt)
        VERSION_REGEX="## $(echo $PACKAGE_VERSION | sed 's/\./\\./g')"
        sed -n "/$VERSION_REGEX/,/## 1\..*/p" CHANGELOG.md | head -n -2 > minichangelog.txt
      displayName: Get branch and mini-changelog

    # Choose files to publish
    - task: CopyFiles@2
      displayName: Stage VSIX for publishing
      inputs:
        contents: |-
          *.vsix
          version.txt
          branch.txt
          minichangelog.txt
        targetFolder: $(Build.ArtifactStagingDirectory)

    # Publish files as an artifact
    - task: PublishPipelineArtifact@1
      displayName: Publish VSIX
      inputs:
        artifact: azure-pipelines-vscode
        targetPath: $(Build.ArtifactStagingDirectory)
